/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OpenTransactions.OTAPI {

public class OTCallback : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OTCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OTCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OTCallback() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapiPINVOKE.delete_OTCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public OTCallback() : this(otapiPINVOKE.new_OTCallback(), true) {
    SwigDirectorConnect();
  }

  public virtual void runOne(string strDisplay, StringPassword theOutput) {
    if (SwigDerivedClassHasMethod("runOne", swigMethodTypes0)) otapiPINVOKE.OTCallback_runOneSwigExplicitOTCallback(swigCPtr, strDisplay, StringPassword.getCPtr(theOutput)); else otapiPINVOKE.OTCallback_runOne(swigCPtr, strDisplay, StringPassword.getCPtr(theOutput));
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void runTwo(string strDisplay, StringPassword theOutput) {
    if (SwigDerivedClassHasMethod("runTwo", swigMethodTypes1)) otapiPINVOKE.OTCallback_runTwoSwigExplicitOTCallback(swigCPtr, strDisplay, StringPassword.getCPtr(theOutput)); else otapiPINVOKE.OTCallback_runTwo(swigCPtr, strDisplay, StringPassword.getCPtr(theOutput));
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("runOne", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateOTCallback_0(SwigDirectorrunOne);
    if (SwigDerivedClassHasMethod("runTwo", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateOTCallback_1(SwigDirectorrunTwo);
    otapiPINVOKE.OTCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(OTCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectorrunOne(string strDisplay, global::System.IntPtr theOutput) {
    runOne(strDisplay, new StringPassword(theOutput, false));
  }

  private void SwigDirectorrunTwo(string strDisplay, global::System.IntPtr theOutput) {
    runTwo(strDisplay, new StringPassword(theOutput, false));
  }

  public delegate void SwigDelegateOTCallback_0(string strDisplay, global::System.IntPtr theOutput);
  public delegate void SwigDelegateOTCallback_1(string strDisplay, global::System.IntPtr theOutput);

  private SwigDelegateOTCallback_0 swigDelegate0;
  private SwigDelegateOTCallback_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(string), typeof(StringPassword) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(string), typeof(StringPassword) };
}

}
