/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OpenTransactions.OTAPI {

public class OTPassword : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OTPassword(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OTPassword obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OTPassword() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapiPINVOKE.delete_OTPassword(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static bool randomizeData(SWIGTYPE_p_std__vectorT_unsigned_char_secure_allocatorT_unsigned_char_t_t vData) {
    bool ret = otapiPINVOKE.OTPassword_randomizeData(SWIGTYPE_p_std__vectorT_unsigned_char_secure_allocatorT_unsigned_char_t_t.getCPtr(vData));
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool randomizeMemory(SWIGTYPE_p_void pMemory, uint theSize) {
    bool ret = otapiPINVOKE.OTPassword_randomizeMemory(SWIGTYPE_p_void.getCPtr(pMemory), theSize);
    return ret;
  }

  public static void zeroMemory(SWIGTYPE_p_void pMemory, uint theSize) {
    otapiPINVOKE.OTPassword_zeroMemory(SWIGTYPE_p_void.getCPtr(pMemory), theSize);
  }

  public static void copyMemory(SWIGTYPE_p_void pIn, uint nIn, SWIGTYPE_p_void pOut, SWIGTYPE_p_size_t nOut) {
    otapiPINVOKE.OTPassword_copyMemory(SWIGTYPE_p_void.getCPtr(pIn), nIn, SWIGTYPE_p_void.getCPtr(pOut), SWIGTYPE_p_size_t.getCPtr(nOut));
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public OTPassword() : this(otapiPINVOKE.new_OTPassword(), true) {
  }

}

}
