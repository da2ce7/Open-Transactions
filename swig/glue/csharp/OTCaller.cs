/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OpenTransactions.OTAPI {

public class OTCaller : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OTCaller(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OTCaller obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OTCaller() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapiPINVOKE.delete_OTCaller(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public OTCaller() : this(otapiPINVOKE.new_OTCaller(), true) {
  }

  public bool GetPassword(Password theOutput) {
    bool ret = otapiPINVOKE.OTCaller_GetPassword(swigCPtr, Password.getCPtr(theOutput));
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ZeroOutPassword() {
    otapiPINVOKE.OTCaller_ZeroOutPassword(swigCPtr);
  }

  public string GetDisplay() {
    string ret = otapiPINVOKE.OTCaller_GetDisplay(swigCPtr);
    return ret;
  }

  public void SetDisplay(string strDisplay) {
    otapiPINVOKE.OTCaller_SetDisplay(swigCPtr, strDisplay);
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void delCallback() {
    otapiPINVOKE.OTCaller_delCallback(swigCPtr);
  }

  public void setCallback(OTCallback cb) {
    otapiPINVOKE.OTCaller_setCallback(swigCPtr, OTCallback.getCPtr(cb));
  }

  public bool isCallbackSet() {
    bool ret = otapiPINVOKE.OTCaller_isCallbackSet(swigCPtr);
    return ret;
  }

  public void callOne() {
    otapiPINVOKE.OTCaller_callOne(swigCPtr);
  }

  public void callTwo() {
    otapiPINVOKE.OTCaller_callTwo(swigCPtr);
  }

}

}
