/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OpenTransactions.OTAPI {

public class StringPassword : Password {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal StringPassword(global::System.IntPtr cPtr, bool cMemoryOwn) : base(otapiPINVOKE.StringPassword_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StringPassword obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringPassword() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapiPINVOKE.delete_StringPassword(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public StringPassword() : this(otapiPINVOKE.new_StringPassword__SWIG_0(), true) {
  }

  public StringPassword(SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_secure_allocatorT_char_t_t data) : this(otapiPINVOKE.new_StringPassword__SWIG_1(SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_secure_allocatorT_char_t_t.getCPtr(data)), true) {
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringPassword(SWIGTYPE_p_std__vectorT_unsigned_char_secure_allocatorT_unsigned_char_t_t data) : this(otapiPINVOKE.new_StringPassword__SWIG_2(SWIGTYPE_p_std__vectorT_unsigned_char_secure_allocatorT_unsigned_char_t_t.getCPtr(data)), true) {
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_secure_allocatorT_char_t_t getCopy() {
    SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_secure_allocatorT_char_t_t ret = new SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_secure_allocatorT_char_t_t(otapiPINVOKE.StringPassword_getCopy(swigCPtr), true);
    return ret;
  }

  public string getChars() {
    string ret = otapiPINVOKE.StringPassword_getChars(swigCPtr);
    return ret;
  }

  public override uint length() {
    uint ret = otapiPINVOKE.StringPassword_length(swigCPtr);
    return ret;
  }

  public override void resize(uint nNewSize) {
    otapiPINVOKE.StringPassword_resize(swigCPtr, nNewSize);
  }

  public override void zero() {
    otapiPINVOKE.StringPassword_zero(swigCPtr);
  }

  public override bool randomize(uint nNewSize) {
    bool ret = otapiPINVOKE.StringPassword_randomize__SWIG_0(swigCPtr, nNewSize);
    return ret;
  }

  public bool randomize() {
    bool ret = otapiPINVOKE.StringPassword_randomize__SWIG_1(swigCPtr);
    return ret;
  }

}

}
