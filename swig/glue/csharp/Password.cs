/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OpenTransactions.OTAPI {

public class Password : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Password(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Password obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Password() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapiPINVOKE.delete_Password(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Password.TYPE getType() {
    Password.TYPE ret = (Password.TYPE)otapiPINVOKE.Password_getType(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_char_secure_allocatorT_unsigned_char_t_t getData() {
    SWIGTYPE_p_std__vectorT_unsigned_char_secure_allocatorT_unsigned_char_t_t ret = new SWIGTYPE_p_std__vectorT_unsigned_char_secure_allocatorT_unsigned_char_t_t(otapiPINVOKE.Password_getData(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__pairT_void_pconst_size_t_const_t getMemory() {
    SWIGTYPE_p_std__pairT_void_pconst_size_t_const_t ret = new SWIGTYPE_p_std__pairT_void_pconst_size_t_const_t(otapiPINVOKE.Password_getMemory__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void getMemory(SWIGTYPE_p_p_void data, SWIGTYPE_p_size_t length) {
    otapiPINVOKE.Password_getMemory__SWIG_1(swigCPtr, SWIGTYPE_p_p_void.getCPtr(data), SWIGTYPE_p_size_t.getCPtr(length));
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__pairT_void_const_pconst_size_t_const_t getMemoryConst() {
    SWIGTYPE_p_std__pairT_void_const_pconst_size_t_const_t ret = new SWIGTYPE_p_std__pairT_void_const_pconst_size_t_const_t(otapiPINVOKE.Password_getMemoryConst__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void getMemoryConst(SWIGTYPE_p_p_void data, SWIGTYPE_p_size_t length) {
    otapiPINVOKE.Password_getMemoryConst__SWIG_1(swigCPtr, SWIGTYPE_p_p_void.getCPtr(data), SWIGTYPE_p_size_t.getCPtr(length));
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint length() {
    uint ret = otapiPINVOKE.Password_length(swigCPtr);
    return ret;
  }

  public virtual void resize(uint arg0) {
    otapiPINVOKE.Password_resize(swigCPtr, arg0);
  }

  public virtual void zero() {
    otapiPINVOKE.Password_zero(swigCPtr);
  }

  public virtual bool randomize(uint arg0) {
    bool ret = otapiPINVOKE.Password_randomize(swigCPtr, arg0);
    return ret;
  }

  public enum TYPE {
    STRING,
    BINARY
  }

}

}
